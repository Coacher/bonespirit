diff --git a/module/gmp-openh264.cpp b/module/gmp-openh264.cpp
index 42a0b80..97ac59f 100644
--- a/module/gmp-openh264.cpp
+++ b/module/gmp-openh264.cpp
@@ -361,14 +361,32 @@ class OpenH264VideoEncoder : public GMPVideoEncoder, public RefCounted {
   }
 
   virtual void EncodingComplete() {
+    // Release the reference to the external objects, because it is no longer safe to call them
+    host_     = nullptr;
+    callback_ = nullptr;
     Release();
   }
 
  private:
   virtual ~OpenH264VideoEncoder() {
-    worker_thread_->Join();
+    // Tear down the internal encoder
+    TearDownEncoder();
   }
 
+   void TearDownEncoder() {
+     // Stop the worker thread first
+     if (worker_thread_) {
+       worker_thread_->Join();
+       worker_thread_ = nullptr;
+     }
+
+     // Destroy OpenH264 encoder
+     if (encoder_) {
+       WelsDestroySVCEncoder(encoder_);
+       encoder_ = nullptr;
+     }
+   }
+
   void Error (GMPErr error) {
     if (callback_) {
       callback_->Error (error);
@@ -464,12 +482,18 @@ class OpenH264VideoEncoder : public GMPVideoEncoder, public RefCounted {
 
   void Encode_m (GMPVideoi420Frame* frame, SFrameBSInfo* encoded,
                  GMPVideoFrameType frame_type) {
+    // Attach a self-destructor so that this dies on return.
+    SelfDestruct<GMPVideoi420Frame> ifd (frame);
+    
+    if (!host_) {
+      return;
+    }
+    
     // Now return the encoded data back to the parent.
     GMPVideoFrame* ftmp;
     GMPErr err = host_->CreateFrame (kGMPEncodedVideoFrame, &ftmp);
     if (err != GMPNoErr) {
       GMPLOG (GL_ERROR, "Error creating encoded frame");
-      frame->Destroy();
       return;
     }
 
@@ -496,7 +520,6 @@ class OpenH264VideoEncoder : public GMPVideoEncoder, public RefCounted {
     if (err != GMPNoErr) {
       GMPLOG (GL_ERROR, "Error allocating frame data");
       f->Destroy();
-      frame->Destroy();
       return;
     }
 
@@ -522,9 +545,6 @@ class OpenH264VideoEncoder : public GMPVideoEncoder, public RefCounted {
             << " timestamp="
             << f->TimeStamp());
 
-    // Destroy the frame.
-    frame->Destroy();
-
     // Return the encoded frame.
     GMPCodecSpecificInfo info;
     memset (&info, 0, sizeof (info)); // shouldn't be needed, we init everything
@@ -532,7 +552,9 @@ class OpenH264VideoEncoder : public GMPVideoEncoder, public RefCounted {
     info.mBufferType = GMP_BufferLength32;
     info.mCodecSpecific.mH264.mSimulcastIdx = 0;
 
-    callback_->Encoded (f, reinterpret_cast<uint8_t*> (&info), sizeof (info));
+    if (callback_) {
+      callback_->Encoded (f, reinterpret_cast<uint8_t*> (&info), sizeof (info));
+    }
 
     stats_.FrameOut();
   }
@@ -716,13 +738,31 @@ class OpenH264VideoDecoder : public GMPVideoDecoder, public RefCounted {
   }
 
   virtual void DecodingComplete() {
+    // Release the reference to the external objects, because it is no longer safe to call them
+    host_     = nullptr;
+    callback_ = nullptr;
     Release();
   }
 
  private:
   virtual ~OpenH264VideoDecoder() {
+    // Tear down the internal decoder
+    TearDownDecoder();
   }
 
+  void TearDownDecoder() {
+    // Stop the worker thread first
+    if (worker_thread_) {
+      worker_thread_->Join();
+      worker_thread_ = nullptr;
+    }
+
+    // Destroy OpenH264 decoder
+    if (decoder_) {
+      WelsDestroyDecoder(decoder_);
+      decoder_ = nullptr;
+    }
+  }
   void Error (GMPErr error) {
     if (callback_) {
       callback_->Error (error);
@@ -780,7 +820,9 @@ class OpenH264VideoDecoder : public GMPVideoDecoder, public RefCounted {
 
     if (decoded->iBufferStatus != 1) {
       GMPLOG (GL_ERROR, "iBufferStatus=" << decoded->iBufferStatus);
-      callback_->InputDataExhausted();
+      if (callback_) {
+        callback_->InputDataExhausted();
+      }
       return;
     }
 
@@ -798,6 +840,10 @@ class OpenH264VideoDecoder : public GMPVideoDecoder, public RefCounted {
 
     GMPVideoFrame* ftmp = nullptr;
 
+    if (!host_) {
+      return;
+    }
+    
     // Translate the image.
     GMPErr err = host_->CreateFrame (kGMPI420VideoFrame, &ftmp);
     if (err != GMPNoErr) {
@@ -822,7 +868,9 @@ class OpenH264VideoDecoder : public GMPVideoDecoder, public RefCounted {
             << frame->AllocatedSize (kGMPYPlane));
     frame->SetTimestamp (inputFrame->TimeStamp());
     frame->SetDuration (inputFrame->Duration());
-    callback_->Decoded (frame);
+    if (callback_) {
+      callback_->Decoded (frame);
+    }
 
     stats_.FrameOut();
   }
